/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  Viewer?: GQLUser;
  Page?: GQLPage;
  Media?: GQLMedia;
}

export interface GQLUser {
  id: number;
  name: string;
  avatar?: GQLUserAvatar;
}

export interface GQLUserAvatar {
  large?: string;
  medium?: string;
}

export interface GQLPage {
  mediaList?: Array<GQLMediaList | null>;
  pageInfo?: GQLPageInfo;
}

export interface GQLMediaList {
  media?: GQLMedia;
  progress?: number;
  score?: number;
}

export interface GQLMedia {
  id: number;
  title?: GQLMediaTitle;
  format?: GQLMediaFormat;
  episodes?: number;
  synonyms?: Array<string | null>;
  bannerImage?: string;
}

export interface GQLMediaTitle {
  romaji?: string;
  english?: string;
  native?: string;
  userPreferred?: string;
}

export enum GQLMediaFormat {
  TV = 'TV',
  TV_SHORT = 'TV_SHORT',
  MOVIE = 'MOVIE',
  SPECIAL = 'SPECIAL',
  OVA = 'OVA',
  ONA = 'ONA',
  MUSIC = 'MUSIC',
  MANGA = 'MANGA',
  NOVEL = 'NOVEL',
  ONE_SHOT = 'ONE_SHOT'
}

export interface GQLPageInfo {
  total?: number;
  perPage?: number;
  currentPage?: number;
  lastPage?: number;
  hasNextPage?: boolean;
}

export enum GQLMediaListStatus {
  CURRENT = 'CURRENT',
  PLANNING = 'PLANNING',
  COMPLETED = 'COMPLETED',
  DROPPED = 'DROPPED',
  PAUSED = 'PAUSED',
  REPEATING = 'REPEATING'
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  User?: GQLUserTypeResolver;
  UserAvatar?: GQLUserAvatarTypeResolver;
  Page?: GQLPageTypeResolver;
  MediaList?: GQLMediaListTypeResolver;
  Media?: GQLMediaTypeResolver;
  MediaTitle?: GQLMediaTitleTypeResolver;
  PageInfo?: GQLPageInfoTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  Viewer?: QueryToViewerResolver<TParent>;
  Page?: QueryToPageResolver<TParent>;
  Media?: QueryToMediaResolver<TParent>;
}

export interface QueryToViewerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMediaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  avatar?: UserToAvatarResolver<TParent>;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserAvatarTypeResolver<TParent = any> {
  large?: UserAvatarToLargeResolver<TParent>;
  medium?: UserAvatarToMediumResolver<TParent>;
}

export interface UserAvatarToLargeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserAvatarToMediumResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPageTypeResolver<TParent = any> {
  mediaList?: PageToMediaListResolver<TParent>;
  pageInfo?: PageToPageInfoResolver<TParent>;
}

export interface PageToMediaListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMediaListTypeResolver<TParent = any> {
  media?: MediaListToMediaResolver<TParent>;
  progress?: MediaListToProgressResolver<TParent>;
  score?: MediaListToScoreResolver<TParent>;
}

export interface MediaListToMediaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaListToProgressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaListToScoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMediaTypeResolver<TParent = any> {
  id?: MediaToIdResolver<TParent>;
  title?: MediaToTitleResolver<TParent>;
  format?: MediaToFormatResolver<TParent>;
  episodes?: MediaToEpisodesResolver<TParent>;
  synonyms?: MediaToSynonymsResolver<TParent>;
  bannerImage?: MediaToBannerImageResolver<TParent>;
}

export interface MediaToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaToEpisodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaToSynonymsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaToBannerImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMediaTitleTypeResolver<TParent = any> {
  romaji?: MediaTitleToRomajiResolver<TParent>;
  english?: MediaTitleToEnglishResolver<TParent>;
  native?: MediaTitleToNativeResolver<TParent>;
  userPreferred?: MediaTitleToUserPreferredResolver<TParent>;
}

export interface MediaTitleToRomajiResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaTitleToEnglishResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaTitleToNativeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MediaTitleToUserPreferredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPageInfoTypeResolver<TParent = any> {
  total?: PageInfoToTotalResolver<TParent>;
  perPage?: PageInfoToPerPageResolver<TParent>;
  currentPage?: PageInfoToCurrentPageResolver<TParent>;
  lastPage?: PageInfoToLastPageResolver<TParent>;
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
}

export interface PageInfoToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToPerPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToCurrentPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToLastPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
